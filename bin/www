var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');
var path = require('path');  // Added for correct file path resolution
var fs = require('fs');
var https = require('https');

var port = normalizePort(process.env.PORT || '8080');
var https_port = process.env.PORT_HTTPS || 8443;
var options = {}

if (process.env.ENV !== "DEV") {
  // Use absolute paths to locate the files correctly
  var privateKeyPath = path.join(__dirname, '../privatekey.pem');
  var certPath = path.join(__dirname, '../server.crt');

  // Read the private key and certificate
  var privatekey = fs.readFileSync(privateKeyPath, "utf8");
  var cert = fs.readFileSync(certPath, "utf8");

  console.log("Private Key Type:", typeof privatekey);

  var header = "-----BEGIN PRIVATE KEY-----";
  var footer = "-----END PRIVATE KEY-----";
  privatekey = privatekey.split(header)[1];
  privatekey = privatekey.split(footer)[0];
  privatekey = header + "\n" + privatekey.replace(/ /g, "\n") + footer + "\n";

  console.log("Processed Private Key:", privatekey);

  var header = "-----BEGIN CERTIFICATE-----";
  var footer = "-----END CERTIFICATE-----";
  cert = cert.split(header)[1];
  cert = cert.split(footer)[0];
  cert = header + "\n" + cert.replace(/ /g, "\n") + footer + "\n";

  var options = {
    key: privatekey,
    cert: cert
  };

  app.set("port", https_port);

  /*
   * Create HTTPS server.
   */
  var server = https.createServer(options, app).listen(https_port, function () {
    console.log('HTTPS Server running on port ' + https_port);
  });

  server.on('error', onError);
  server.on('listening', onListening);

  // Redirect HTTP to HTTPS
  http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(port, https_port) + req.url });
    console.log("Redirecting HTTP request to >> ", "https://" + req.headers['host'].replace(port, https_port) + req.url);
    res.end();
  }).listen(port);

} else {
  var server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}
