var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');
var fs = require('fs');
var https = require('https');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val; // Named pipe
  if (port >= 0) return port; // Port number
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // Handle specific listen errors
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Set port to 8443 to match Security Group settings
var port = normalizePort(process.env.PORT || '8443');
var options = {};

if (process.env.ENV !== "DEV") {
  var privatekey = fs.readFileSync('privatekey.pem', "utf8");
  var cert = fs.readFileSync('server.crt', "utf8");

  // Format private key and certificate
  privatekey = "-----BEGIN PRIVATE KEY-----\n" + 
               privatekey.split("-----BEGIN PRIVATE KEY-----")[1].split("-----END PRIVATE KEY-----")[0].replace(/ /g, "\n") + 
               "\n-----END PRIVATE KEY-----\n";

  cert = "-----BEGIN CERTIFICATE-----\n" + 
         cert.split("-----BEGIN CERTIFICATE-----")[1].split("-----END CERTIFICATE-----")[0].replace(/ /g, "\n") + 
         "\n-----END CERTIFICATE-----\n";

  options = { key: privatekey, cert: cert };

  app.set("port", port);

  // Start HTTPS server
  var server = https.createServer(options, app).listen(port, function () {
    console.log('Server running securely on port ' + port);
  });

  server.on('error', onError);
  server.on('listening', onListening);
} else {
  // Dev mode uses HTTP (useful for testing locally)
  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}
